<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--扫描com.smart.dao包下所有标注@Repository的DAO组件-->
    <context:component-scan base-package="com.smart.dao"/>
    <!--引入定义jdbc连接的属性文件-->
    <context:property-placeholder location="jdbc.properties"/>

    <!--定义数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close"
          p:driverClassName="${jdbc.driverClassName}"
          p:url="${jdbc.url}"
          p:username="${jdbc.username}"
          p:password="${jdbc.password}"/>

    <!--定义hibernate的session工厂-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan"><!--扫描基于JPA注解的PO类目录-->
            <list>
                <value>com.smart.domain</value>
            </list>
        </property>
        <!--指定hibernate属性信息-->
        <property name="hibernateProperties">
            <props>
                <!--指定数据库的类型为MySQL-->
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.MySQLDialect
                </prop>
                <!--是否输出SQL语句，方便开发期的调试，部署时可设置为false-->
                <prop key="hibernate.show_sql">true</prop>
                <!--开启二级缓存-->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <!--采用EhCache缓存实现方案-->
                <prop key="hibernate.cache.region.factory_class">
                    org.hibernate.cache.ehcache.EhCacheRegionFactory
                </prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
            </props>
        </property>
    </bean>

    <!--定义hibernateTemplate-->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate"
          p:sessionFactory-ref="sessionFactory"/>

    <!--<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">-->
        <!--<property name="sessionFactory" ref="sessionFactory"/>-->
    <!--</bean>-->

    <!--<tx:advice id="txAdvice"  transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="*" propagation="REQUIRED" read-only="true"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED" read-only="false" />-->
            <!--<tx:method name="save*" propagation="REQUIRED" read-only="false" />-->
            <!--<tx:method name="reg*" propagation="REQUIRED" read-only="false" />-->
            <!--<tx:method name="update*" propagation="REQUIRED" read-only="false" />-->
            <!--<tx:method name="delete*" propagation="REQUIRED" read-only="false" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--<aop:config>-->
        <!--<aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* com.smart.*.*(..)))" order="1"/>-->
    <!--</aop:config>-->
</beans>